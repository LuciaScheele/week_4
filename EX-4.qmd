---
title: "Similarity"
format: html
---

```{r}
library("readr")
library(tmap)
library("dplyr")
library("sf")
library(dplyr)
library(lubridate)
library(SimilarityMeasures)

```

# ex 4

## Import Data

```{r}
tracks <- read_delim("all_tracks_Lucia.csv", delim = ",") 

tracks <- tracks |> 
  st_as_sf(coords = c("lon", "lat"), crs = 4326) 
st_crs(tracks) <- 4326

st_crs(tracks)
  
st_transform(tracks, crs = 2056) # Transforming the crs to CH1903+95

# adding coordinates
tracks <- cbind(tracks,st_coordinates(tracks))
```

### Checking Data
```{r}
str(tracks) # check structure
attr(all_tracks$timestamp, "tzone") # Check Timezone

# Making a map of the data
tmap_mode("view")

  tm_shape(tracks)+
  tm_dots(col = "ActivityName") 
```

### Filtern 
```{r}
home <- tracks |> filter(ActivityName == "Home")
```

#Task 1: 
## Dataexploration of example track

```{r}
library(ggplot2)

# Duration of recording
difftime(max(home$timestamp, na.rm = T), min(home$timestamp, na.rm = T))

# Sampling frequency
difftime_secs <- function(later, now){
    as.numeric(difftime(later, now, units = "secs"))
}

home <- home |> 
  mutate(timelag = difftime_secs(lead(timestamp), timestamp))

boxplot(home$timelag)
summary(home$timelag)

home |> 
  ggplot(aes(timestamp, timelag)) + 
  geom_point()
```

The largest part of the given timestamps was recorded with an interval of 1-second. There are a few outliers with an interval of up to 331 seconds (i.e. 5.5 min) and they mainly occur in the second half of the recording. The duration of the recording is one hour. 

## Step a): Specify a temporal window 
At this point, one could try out different temporal window specifications. I will choose a temporal window of 10 seconds around a fix and a sample of 4 distances.

We need to calculate the following Euclidean distances (pos representing single location):
  
- pos[n-5] to pos[n]
- pos[n-2] to pos[n]
- pos[n] to pos[n+2]
- pos[n] to pos[n+5]

Für die Distanzrechnung nutzt man st_distance mit dem Argument by_element = T.
Um die Unit Meter los zu werden würden wir diese Zeilen noch mit as.numeric versehen. 
Einfacher geht es mit einer Funktion.

## Step b): Measure the distance from every point to every other point within this temporal window 
We can use the function distance_by_element from week 2 in combination with lead() and lag() to calculate the Euclidean distance. For example, to create the necessary offset of n-2, we use lag(x, 2). For each offset, we create one individual column.

```{r}
# We need to calculate the following Euclidean distances (pos representing single location):
# Distance btw. PointsFuntion
distance_by_element <- function(later, now){
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
  }

home <- home |> mutate(
  nMinus5 = distance_by_element(lag(geometry, n=5), geometry), # distance to pos -5 seconds
  nMinus2 = distance_by_element(lag(geometry, n=2), geometry), # distance to pos -2 seconds
  nPlus2 = distance_by_element(geometry, lead(geometry, n=2)), # distance to pos +2 seconds
  nPlus5 = distance_by_element(geometry, lead(geometry, n=5))  # distance to pos +5 seconds
)

summary(home$nMinus5)
```

Now we want to calculate the mean distance of nMinus5, nMinus2, nPlus2, nPlus5 for each row. Since we want the mean value per Row, we have to explicitly specify this before mutate() with the function rowwise(). To remove this rowwise-grouping, we end the operation with ungroup().

Note that for the first two positions, we cannot calculate a stepMean since there is no Position n-2 for these positions. This is also true for the last to positions (lacking a position n+2).

```{r}
home <- home |>
    rowwise() |>
    mutate(
        stepMean = mean(c(nMinus5, nMinus2, nPlus2, nPlus5))
    ) |>
    ungroup()

home 
```

# Task 2: Specify and apply threshold d
After calculating the Euclidean distances to positions within the temporal window v in task 1, you can explore these values (we stored them in the column stepMean) using summary statistics (histograms, boxplot, summary()): This way we can define a reasonable threshold value to differentiate between stops and moves. There is no “correct” way of doing this, specifying a threshold always depends on data as well as the question that needs to be answered. In this exercise, use the mean of all stepMean values.

Store the new information (boolean to differentiate between stops (TRUE) and moves (FALSE)) in a new column named static.


```{r}
hist(home$stepMean)
boxplot(home$stepMean)
summary(home$stepMean)

home <- home |> 
  mutate(static = stepMean < mean(stepMean, na.rm = TRUE)) 

```
Commit your changes with a meaningful commit message.

# Task 3: Visualize segmented trajectories
Now visualize the segmented trajectory spatially. Just like last week, you can use ggplot with geom_path(), geom_point() and coord_equal(). Assign colour = static within aes() to distinguish between segments with “movement” and without.

```{r}
home_filter <- home |>
    filter(!static)

home_filter |>
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")
```

# Task 4: Segment-based analysis
In applying Laube and Purves (2011), we’ve come as far as step b) in Figure 14.1. In order to complete the last steps (c and d), we need a unique ID for each segment that we can use as a grouping variable. The following function does just that (it assigns unique IDs based on the column static which you created in Task 2). You will learn about functions next week. For now, just copy the following code chunk into your script and run it.

### Unique IDs
```{r}
rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
} 
```

You can use the newly created function rle_id to assign unique IDs to subtrajectories (as shown below). 

```{r}
home <- home |>
  mutate(segment_id = rle_id(static))
```

The df of my track now contains a column of IDs that are allocated to segments by differentiating between static (true) and non.static (false) segements. 

### Visualize the moving segments 
by colourizing them by segment_ID. Then use segment_ID as a grouping variable to determine the segments duration and remove short segments (e.g. segments with a duration < 5 Minutes)

```{r}
home |>
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point(aes(colour = segment_id)) +
    coord_fixed() +
    theme(legend.position = "bottom") +
 theme(legend.position = "none")
```

### Segment duration

```{r}
# Duration of segments 
difftime_secs_by_element <- function(later, now){
    as.numeric(difftime(later, now, units = "secs"), by_element = T)
}

home <- home |> 
  group_by(segment_id) |> 
  mutate(duration = difftime_secs_by_element(max(timestamp), min(timestamp)))

# Summary of Segment duration in minutes
summary(c(home$duration/60))
boxplot(c(home$duration/60))
```

It is not clear whay we did this step with static segments included. I thus want to keep working with only dynamic segments. 

#### Try out for only dynamic data
```{r}
home_filter <- home |> 
  filter(static== FALSE) |> 
  group_by(segment_id) |> 
  mutate(duration = difftime_secs_by_element(max(timestamp), min(timestamp)))

# Summary of Segment duration in minutes
summary(c(home_filter$duration/60))
boxplot(c(home_filter$duration/60))
```

### Remove short segments
I would like to look at movement segments longer than a minute, so I will remove the segments with a duration of less than 60 seconds. 

```{r}
home_filter_cleaned <- home_filter |>  
  filter(duration >= 60)

home_filter_cleaned |>
  group_by(segment_id) |> 
    ggplot(aes(X, Y)) +
    geom_path() +
    geom_point(aes(colour = segment_id)) +
    coord_fixed() +
    theme(legend.position = "bottom") +
 theme(legend.position = "none")
```

Commit your changes with a meaningful commit message.

# Task 5: Similarity measures
We will now calculate similarties between trajectories using a new dataset pedestrian.csv. Download an import this dataset as a data.frame or tibble. It it a set of six different but similar trajectories from pedestrians walking on a path.

### Data Import
```{r}
pedestrian <- read_delim("pedestrian.csv", delim = ",") |> 
  st_as_sf(coords = c("E", "N"), crs = 2056, remove = FALSE)
```

### Exploration of Data
```{r}
pedestrian |> 
  ggplot(aes(E,N))+
  geom_point(aes(colour = TrajID)) +
  geom_line() +
  facet_wrap(vars(TrajID))
```

From this vizualisation, we can already see that there are differences in the sampling frequency and spacial extension of the trajectory fixes. 

An interesting observation is in the trajIDs 4 and 5, where several or single fixes are out of the spatial pattern. It appears to be an irregularity along the N-Values.  

For further comparisons, it would be important to know more about the temporal scales of the trajectories, i.e.their duration, timelag, and length. 

```{r}
# length/ amount of fixes per trajectories 
count <- pedestrian |> 
  group_by(TrajID) |> 
  summarise(count= n())

duration <- pedestrian |> 
  group_by(TrajID) |> 
  summarise(duration = max(DatetimeUTC) - min(DatetimeUTC))

# sampling frequency (timelag)
pedestrian <- pedestrian |> 
  mutate(timelag = difftime_secs(lead(DatetimeUTC), DatetimeUTC))

boxplot(pedestrian$timelag)
summary(pedestrian$timelag)

pedestrian |> 
  filter(timelag > c(-2000)) |> 
  ggplot(aes(DatetimeUTC, timelag)) + 
  geom_point() +
  facet_wrap(vars(TrajID))

# Duration
pedestrian |> group_by(TrajID) |> 
  summarize(duration = difftime_secs(max(DatetimeUTC, na.rm = T), min(DatetimeUTC, na.rm = T)))

difftime(max(home$timestamp, na.rm = T), min(home$timestamp, na.rm = T))
```

Die gegebenen Trajectories haben eine Sampling frequency von 60 Sekunden, wobei die Anzahl der Aufgenommenen Fixes (von 45 bis 51 Fixes/Trajectory) und die Dauer der Aufnahme (von 2700 bis 3060) variieieren.

# Task 6: 
Install the package SimilarityMeasures (install.packages("SimilarityMeasures")). Familiarize yourself with this package by skimming through the function descriptions help(package = "SimilarityMeasures"). 

```{r}
install.packages("SimilarityMeasures")
help(package = "SimilarityMeasures")
```

Now compare trajectory 1 to trajectories 2-6 using different similarity measures from the package. Your options are. DTW, EditDist, Frechet and LCSS.

*All functions in the package need matrices as input, with one trajectory per matrix.*

## Splitting trajectories to matrices

```{r}
ID1 <- pedestrian |> 
  filter(TrajID == 1) |>
  st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

ID2 <- pedestrian |> 
  filter(TrajID == 2) |> 
  st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

ID3 <- pedestrian |> 
  filter(TrajID == 3)|> 
    st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

ID4 <- pedestrian |> 
  filter(TrajID == 4)|> 
  st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

ID5 <- pedestrian |> 
  filter(TrajID == 5)|>
   st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

ID6 <- pedestrian |> 
  filter(TrajID == 6)|> 
    st_drop_geometry() |> 
  subset(select = c(E,N)) |> 
  as.matrix()

str(ID1)
```

## Similarity measures
```{r}
# DTW
results_DTW <- c(DTW(ID1, ID2), 
                 DTW(ID1, ID3), 
                 DTW(ID1, ID4), 
                 DTW(ID1, ID5), DTW(ID1, ID6))

# EditDist
results_EditDist <- c(EditDist(ID1, ID2), 
                 EditDist(ID1, ID3), 
                 EditDist(ID1, ID4), 
                 EditDist(ID1, ID5), EditDist(ID1, ID6))

# Frechet 
results_Frechet <- c(Frechet(ID1, ID2), 
                 Frechet(ID1, ID3), 
                 Frechet(ID1, ID4), 
                 Frechet(ID1, ID5), Frechet(ID1, ID6))

# LCSS
  results_LCSS <- c(
    LCSS(ID1, ID2, pointSpacing = -50, 
         pointDistance = 200, errorMarg = 20), 
    LCSS(ID1, ID3, pointSpacing = -50, 
         pointDistance = 200, errorMarg = 20),
    LCSS(ID1, ID4, pointSpacing = -50, 
         pointDistance = 200, errorMarg = 20),
    LCSS(ID1, ID5, pointSpacing = -50, 
         pointDistance = 200, errorMarg = 20), 
    LCSS(ID1, ID6, pointSpacing = -50, 
         pointDistance = 200, errorMarg = 20))
  
```


## Visualization
Before visualizing your results think about the following: Which two trajectories to you percieve to be most similar, which are most dissimilar? Now visualize the results from the computed similarity measures. Which measure reflects your own intuition the closest?

```{r}
barplot(results_DTW, col = c("blue", "red", "green", "yellow", "orange"))

barplot(results_EditDist, col = c("blue", "red", "green", "yellow", "orange"), title("Edit_Distance"))

barplot(results_Frechet, col = c("blue", "red", "green", "yellow", "orange"), title("Frechet"))

barplot(results_LCSS, col = c("blue", "red", "green", "yellow", "orange"), title("LCSS"))

```

Habe gerade keine Zeit mehr mich näher mit den Plots zu beschäftigen. Idelerweise hätte ich die Ergebnisse direkt in einem DF und könnte diese entsprechend mit einem ggplot darstellen... 